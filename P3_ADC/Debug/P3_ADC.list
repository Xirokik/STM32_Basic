
P3_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e8  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800046c  08000474  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800046c  0800046c  00010474  2**0
                  CONTENTS
  4 .ARM          00000000  0800046c  0800046c  00010474  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800046c  08000474  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000470  08000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010474  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010474  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000104a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c4e  00000000  00000000  000104e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000022e  00000000  00000000  00011135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000088  00000000  00000000  00011368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000005d  00000000  00000000  000113f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c479  00000000  00000000  0001144d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000006e8  00000000  00000000  0002d8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009ef11  00000000  00000000  0002dfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000016c  00000000  00000000  000ccec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000cd02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000454 	.word	0x08000454

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000454 	.word	0x08000454

080001c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	6039      	str	r1, [r7, #0]
 80001ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	db0a      	blt.n	80001ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	b2da      	uxtb	r2, r3
 80001dc:	490c      	ldr	r1, [pc, #48]	; (8000210 <__NVIC_SetPriority+0x4c>)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	0112      	lsls	r2, r2, #4
 80001e4:	b2d2      	uxtb	r2, r2
 80001e6:	440b      	add	r3, r1
 80001e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ec:	e00a      	b.n	8000204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4908      	ldr	r1, [pc, #32]	; (8000214 <__NVIC_SetPriority+0x50>)
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f003 030f 	and.w	r3, r3, #15
 80001fa:	3b04      	subs	r3, #4
 80001fc:	0112      	lsls	r2, r2, #4
 80001fe:	b2d2      	uxtb	r2, r2
 8000200:	440b      	add	r3, r1
 8000202:	761a      	strb	r2, [r3, #24]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	e000e100 	.word	0xe000e100
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3b01      	subs	r3, #1
 8000224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000228:	d301      	bcc.n	800022e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800022a:	2301      	movs	r3, #1
 800022c:	e00f      	b.n	800024e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <SysTick_Config+0x40>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3b01      	subs	r3, #1
 8000234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000236:	210f      	movs	r1, #15
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f7ff ffc2 	bl	80001c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <SysTick_Config+0x40>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <SysTick_Config+0x40>)
 8000248:	2207      	movs	r2, #7
 800024a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	e000e010 	.word	0xe000e010

0800025c <main>:
void Delay(uint32_t delay_ms);
uint32_t GetSystemTick(void);

uint32_t ADC_Data;
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	SysTick_Config(4000000/1000);
 8000260:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000264:	f7ff ffd8 	bl	8000218 <SysTick_Config>

	ADC_Config();
 8000268:	f000 f80c 	bl	8000284 <ADC_Config>
	ADC_Pin();
 800026c:	f000 f860 	bl	8000330 <ADC_Pin>

	/* Loop forever */
	while(1){
		ADC_Conversion();
 8000270:	f000 f87e 	bl	8000370 <ADC_Conversion>
		ADC_Data=ADC_Read();
 8000274:	f000 f894 	bl	80003a0 <ADC_Read>
 8000278:	4603      	mov	r3, r0
 800027a:	4a01      	ldr	r2, [pc, #4]	; (8000280 <main+0x24>)
 800027c:	6013      	str	r3, [r2, #0]
		ADC_Conversion();
 800027e:	e7f7      	b.n	8000270 <main+0x14>
 8000280:	2000001c 	.word	0x2000001c

08000284 <ADC_Config>:
	}
}

void ADC_Config(void){
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	RCC->AHB2ENR|= RCC_AHB2ENR_ADCEN;//ADC clock enable
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <ADC_Config+0xa0>)
 800028a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028c:	4a25      	ldr	r2, [pc, #148]	; (8000324 <ADC_Config+0xa0>)
 800028e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000292:	64d3      	str	r3, [r2, #76]	; 0x4c

	RCC->CCIPR|=RCC_CCIPR_ADCSEL; //  ADCs clock source selection (System clock selected)
 8000294:	4b23      	ldr	r3, [pc, #140]	; (8000324 <ADC_Config+0xa0>)
 8000296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800029a:	4a22      	ldr	r2, [pc, #136]	; (8000324 <ADC_Config+0xa0>)
 800029c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80002a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	ADC1->CR&= ~(ADC_CR_DEEPPWD); //Deep-power-down enable - NEED TO BE DISABLE
 80002a4:	4b20      	ldr	r3, [pc, #128]	; (8000328 <ADC_Config+0xa4>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a1f      	ldr	r2, [pc, #124]	; (8000328 <ADC_Config+0xa4>)
 80002aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002ae:	6093      	str	r3, [r2, #8]
	ADC1->CR|= ADC_CR_ADVREGEN;//  ADC voltage regulator enable
 80002b0:	4b1d      	ldr	r3, [pc, #116]	; (8000328 <ADC_Config+0xa4>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4a1c      	ldr	r2, [pc, #112]	; (8000328 <ADC_Config+0xa4>)
 80002b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002ba:	6093      	str	r3, [r2, #8]
	//ADCALDIF: Differential mode for calibration (single-ended inputs mode (default)
	ADC123_COMMON ->CCR &= ~(ADC_CCR_PRESC); //ADC prescaler (not divided) 4 MHZ
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <ADC_Config+0xa8>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a1a      	ldr	r2, [pc, #104]	; (800032c <ADC_Config+0xa8>)
 80002c2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80002c6:	6093      	str	r3, [r2, #8]

	ADC1->CFGR&=~(ADC_CFGR_RES); //Data resolution 12-bit
 80002c8:	4b17      	ldr	r3, [pc, #92]	; (8000328 <ADC_Config+0xa4>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a16      	ldr	r2, [pc, #88]	; (8000328 <ADC_Config+0xa4>)
 80002ce:	f023 0318 	bic.w	r3, r3, #24
 80002d2:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR&=~(ADC_CFGR_ALIGN); //Data alignment right alignment
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <ADC_Config+0xa4>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <ADC_Config+0xa4>)
 80002da:	f023 0320 	bic.w	r3, r3, #32
 80002de:	60d3      	str	r3, [r2, #12]
	//ADC1->SMPR1|= ADC_SMPR1_SMP5_2;// sampling time
	ADC1->SQR1&= ~(ADC_SQR1_L); //1 conversion default
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <ADC_Config+0xa4>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a10      	ldr	r2, [pc, #64]	; (8000328 <ADC_Config+0xa4>)
 80002e6:	f023 030f 	bic.w	r3, r3, #15
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30

	ADC1->SQR1|=ADC_SQR1_SQ1_2 | ADC_SQR1_SQ1_0;// IN5 in sequence
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <ADC_Config+0xa4>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <ADC_Config+0xa4>)
 80002f2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->CR|=ADC_CR_ADCAL; // ADC calibration
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <ADC_Config+0xa4>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <ADC_Config+0xa4>)
 80002fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000302:	6093      	str	r3, [r2, #8]
	while(ADC1->CR&ADC_CR_ADCAL);
 8000304:	bf00      	nop
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <ADC_Config+0xa4>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	dbfb      	blt.n	8000306 <ADC_Config+0x82>
	ADC1->CR|=ADC_CR_ADEN; //ADC enable control
 800030e:	4b06      	ldr	r3, [pc, #24]	; (8000328 <ADC_Config+0xa4>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a05      	ldr	r2, [pc, #20]	; (8000328 <ADC_Config+0xa4>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6093      	str	r3, [r2, #8]

}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	40021000 	.word	0x40021000
 8000328:	50040000 	.word	0x50040000
 800032c:	50040300 	.word	0x50040300

08000330 <ADC_Pin>:


void ADC_Pin(void){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN; //enable gpioa
 8000334:	4b0d      	ldr	r3, [pc, #52]	; (800036c <ADC_Pin+0x3c>)
 8000336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000338:	4a0c      	ldr	r2, [pc, #48]	; (800036c <ADC_Pin+0x3c>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER |= GPIO_MODER_MODE0; //Analog input(reset mode)
 8000340:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800034a:	f043 0303 	orr.w	r3, r3, #3
 800034e:	6013      	str	r3, [r2, #0]

	GPIOA->ASCR|=GPIO_ASCR_ASC0;//Connect analog switch to the ADC input PA0
 8000350:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000356:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <ADC_Conversion>:

void ADC_Conversion(void){
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0


	ADC1->CR|=ADC_CR_ADSTART;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <ADC_Conversion+0x2c>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	4a08      	ldr	r2, [pc, #32]	; (800039c <ADC_Conversion+0x2c>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6093      	str	r3, [r2, #8]
	while(!(ADC1->ISR&ADC_ISR_EOS));
 8000380:	bf00      	nop
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <ADC_Conversion+0x2c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f003 0308 	and.w	r3, r3, #8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <ADC_Conversion+0x12>

}
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	50040000 	.word	0x50040000

080003a0 <ADC_Read>:
uint32_t ADC_Read(void){
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	return ADC1->DR;
 80003a4:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <ADC_Read+0x14>)
 80003a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	50040000 	.word	0x50040000

080003b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	; (80003f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <LoopForever+0xe>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	; (8000404 <LoopForever+0x16>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e6:	f000 f811 	bl	800040c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff ff37 	bl	800025c <main>

080003ee <LoopForever>:

LoopForever:
  b LoopForever
 80003ee:	e7fe      	b.n	80003ee <LoopForever>
  ldr   r0, =_estack
 80003f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003fc:	08000474 	.word	0x08000474
  ldr r2, =_sbss
 8000400:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000404:	20000020 	.word	0x20000020

08000408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC1_2_IRQHandler>
	...

0800040c <__libc_init_array>:
 800040c:	b570      	push	{r4, r5, r6, lr}
 800040e:	4d0d      	ldr	r5, [pc, #52]	; (8000444 <__libc_init_array+0x38>)
 8000410:	4c0d      	ldr	r4, [pc, #52]	; (8000448 <__libc_init_array+0x3c>)
 8000412:	1b64      	subs	r4, r4, r5
 8000414:	10a4      	asrs	r4, r4, #2
 8000416:	2600      	movs	r6, #0
 8000418:	42a6      	cmp	r6, r4
 800041a:	d109      	bne.n	8000430 <__libc_init_array+0x24>
 800041c:	4d0b      	ldr	r5, [pc, #44]	; (800044c <__libc_init_array+0x40>)
 800041e:	4c0c      	ldr	r4, [pc, #48]	; (8000450 <__libc_init_array+0x44>)
 8000420:	f000 f818 	bl	8000454 <_init>
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	10a4      	asrs	r4, r4, #2
 8000428:	2600      	movs	r6, #0
 800042a:	42a6      	cmp	r6, r4
 800042c:	d105      	bne.n	800043a <__libc_init_array+0x2e>
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f855 3b04 	ldr.w	r3, [r5], #4
 8000434:	4798      	blx	r3
 8000436:	3601      	adds	r6, #1
 8000438:	e7ee      	b.n	8000418 <__libc_init_array+0xc>
 800043a:	f855 3b04 	ldr.w	r3, [r5], #4
 800043e:	4798      	blx	r3
 8000440:	3601      	adds	r6, #1
 8000442:	e7f2      	b.n	800042a <__libc_init_array+0x1e>
 8000444:	0800046c 	.word	0x0800046c
 8000448:	0800046c 	.word	0x0800046c
 800044c:	0800046c 	.word	0x0800046c
 8000450:	08000470 	.word	0x08000470

08000454 <_init>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr

08000460 <_fini>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr
