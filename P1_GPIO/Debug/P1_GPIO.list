
P1_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ec  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000570  08000578  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000570  08000570  00010578  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00010578  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000578  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000574  08000574  00010574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010578  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000105a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000a65  00000000  00000000  000105eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000020c  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000090  00000000  00000000  00011260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000063  00000000  00000000  000112f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c479  00000000  00000000  00011353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000721  00000000  00000000  0002d7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009ee78  00000000  00000000  0002deed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000018c  00000000  00000000  000ccd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000ccef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000558 	.word	0x08000558

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000558 	.word	0x08000558

080001c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	6039      	str	r1, [r7, #0]
 80001ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	db0a      	blt.n	80001ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	b2da      	uxtb	r2, r3
 80001dc:	490c      	ldr	r1, [pc, #48]	; (8000210 <__NVIC_SetPriority+0x4c>)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	0112      	lsls	r2, r2, #4
 80001e4:	b2d2      	uxtb	r2, r2
 80001e6:	440b      	add	r3, r1
 80001e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ec:	e00a      	b.n	8000204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4908      	ldr	r1, [pc, #32]	; (8000214 <__NVIC_SetPriority+0x50>)
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	f003 030f 	and.w	r3, r3, #15
 80001fa:	3b04      	subs	r3, #4
 80001fc:	0112      	lsls	r2, r2, #4
 80001fe:	b2d2      	uxtb	r2, r2
 8000200:	440b      	add	r3, r1
 8000202:	761a      	strb	r2, [r3, #24]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	e000e100 	.word	0xe000e100
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3b01      	subs	r3, #1
 8000224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000228:	d301      	bcc.n	800022e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800022a:	2301      	movs	r3, #1
 800022c:	e00f      	b.n	800024e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800022e:	4a0a      	ldr	r2, [pc, #40]	; (8000258 <SysTick_Config+0x40>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3b01      	subs	r3, #1
 8000234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000236:	210f      	movs	r1, #15
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f7ff ffc2 	bl	80001c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000240:	4b05      	ldr	r3, [pc, #20]	; (8000258 <SysTick_Config+0x40>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000246:	4b04      	ldr	r3, [pc, #16]	; (8000258 <SysTick_Config+0x40>)
 8000248:	2207      	movs	r2, #7
 800024a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	e000e010 	.word	0xe000e010

0800025c <main>:
void ConfigButton();
void Delay(uint32_t delay_ms);
uint32_t GetSystemTick(void);

int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	ClockConfig();
 8000260:	f000 f840 	bl	80002e4 <ClockConfig>
	SysTick_Config(16000000/1000);
 8000264:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000268:	f7ff ffd6 	bl	8000218 <SysTick_Config>
	ConfigLD1();
 800026c:	f000 f874 	bl	8000358 <ConfigLD1>
	ConfigLD2();
 8000270:	f000 f8aa 	bl	80003c8 <ConfigLD2>
	ConfigButton();
 8000274:	f000 f8e0 	bl	8000438 <ConfigButton>
	TimerLD2=GetSystemTick();
 8000278:	f000 f914 	bl	80004a4 <GetSystemTick>
 800027c:	4603      	mov	r3, r0
 800027e:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <main+0x84>)
 8000280:	6013      	str	r3, [r2, #0]
	/* Loop forever */
	while(1){
		if((GPIOA->IDR&(GPIO_IDR_ID6))==0){ // check button state
 8000282:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800028c:	2b00      	cmp	r3, #0
 800028e:	d108      	bne.n	80002a2 <main+0x46>
			GPIOA->BSRR |= GPIO_BSRR_BS5; //LED ON
 8000290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800029a:	f043 0320 	orr.w	r3, r3, #32
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	e007      	b.n	80002b2 <main+0x56>
		}
		else{
			GPIOA->BSRR |= GPIO_BSRR_BR5; //LD OFF
 80002a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002b0:	6193      	str	r3, [r2, #24]
		}
		if(GetSystemTick()-TimerLD2>500){
 80002b2:	f000 f8f7 	bl	80004a4 <GetSystemTick>
 80002b6:	4602      	mov	r2, r0
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <main+0x84>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002c2:	d9de      	bls.n	8000282 <main+0x26>
			TimerLD2=GetSystemTick(); //Blink without delay
 80002c4:	f000 f8ee 	bl	80004a4 <GetSystemTick>
 80002c8:	4603      	mov	r3, r0
 80002ca:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <main+0x84>)
 80002cc:	6013      	str	r3, [r2, #0]
			GPIOA->ODR^=GPIO_ODR_OD7; //LD TOGGLE (XOR)
 80002ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d8:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80002dc:	6153      	str	r3, [r2, #20]
		if((GPIOA->IDR&(GPIO_IDR_ID6))==0){ // check button state
 80002de:	e7d0      	b.n	8000282 <main+0x26>
 80002e0:	20000020 	.word	0x20000020

080002e4 <ClockConfig>:
		Delay(1000);
		GPIOA->BSRR |= GPIO_BSRR_BR5; //LD OFF
		Delay(1000);*/
	}
}
void ClockConfig(){
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_MSION; // Active clock source
 80002e8:	4b1a      	ldr	r3, [pc, #104]	; (8000354 <ClockConfig+0x70>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a19      	ldr	r2, [pc, #100]	; (8000354 <ClockConfig+0x70>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR&RCC_CR_MSIRDY)); //wait for clock source ready
 80002f4:	bf00      	nop
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <ClockConfig+0x70>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f003 0302 	and.w	r3, r3, #2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f9      	beq.n	80002f6 <ClockConfig+0x12>
	RCC->CR &= ~RCC_CR_MSIRANGE; //Clear range
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <ClockConfig+0x70>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a13      	ldr	r2, [pc, #76]	; (8000354 <ClockConfig+0x70>)
 8000308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800030c:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_MSIRANGE_8;// set range
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <ClockConfig+0x70>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a10      	ldr	r2, [pc, #64]	; (8000354 <ClockConfig+0x70>)
 8000314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000318:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_MSIRGSEL;// enable to read from range
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <ClockConfig+0x70>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <ClockConfig+0x70>)
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~RCC_CFGR_SW; // clear clock source
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <ClockConfig+0x70>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <ClockConfig+0x70>)
 800032c:	f023 0303 	bic.w	r3, r3, #3
 8000330:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_MSI;// set clock source
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <ClockConfig+0x70>)
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <ClockConfig+0x70>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI);//wait until MSI is set as clock source
 800033a:	bf00      	nop
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <ClockConfig+0x70>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	f003 030c 	and.w	r3, r3, #12
 8000344:	2b00      	cmp	r3, #0
 8000346:	d1f9      	bne.n	800033c <ClockConfig+0x58>


}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40021000 	.word	0x40021000

08000358 <ConfigLD1>:
void ConfigLD1(){
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;//Active port
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <ConfigLD1+0x6c>)
 800035e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000360:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <ConfigLD1+0x6c>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= GPIO_MODER_MODE5_0;//set output
 8000368:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000376:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_1);
 8000378:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000386:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5);// push pull
 8000388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000392:	f023 0320 	bic.w	r3, r3, #32
 8000396:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);// speed react
 8000398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003a6:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5);//no pull up, pull down
 80003a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003b2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003b6:	60d3      	str	r3, [r2, #12]

}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <ConfigLD2>:
void ConfigLD2(){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;//Active port
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <ConfigLD2+0x6c>)
 80003ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <ConfigLD2+0x6c>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= GPIO_MODER_MODE7_0;//set output
 80003d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE7_1);
 80003e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003f6:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT7);// push pull
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000406:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7);// speed react
 8000408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000412:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000416:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD7);//no pull up, pull down
 8000418:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000422:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000426:	60d3      	str	r3, [r2, #12]

}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <ConfigButton>:
void ConfigButton(){
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <ConfigButton+0x4c>)
 800043e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000440:	4a10      	ldr	r2, [pc, #64]	; (8000484 <ConfigButton+0x4c>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER &= ~(GPIO_MODER_MODE6);//set input
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000456:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD6_1);// pull up
 8000458:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000466:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD6_0;
 8000468:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000476:	60d3      	str	r3, [r2, #12]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <SysTick_Handler>:
void SysTick_Handler(void){
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	Tick++;
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <SysTick_Handler+0x18>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a03      	ldr	r2, [pc, #12]	; (80004a0 <SysTick_Handler+0x18>)
 8000494:	6013      	str	r3, [r2, #0]
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	2000001c 	.word	0x2000001c

080004a4 <GetSystemTick>:

void Delay(uint32_t delay_ms){
	uint32_t StartTime=Tick;
	while(Tick<(StartTime+delay_ms));
}
uint32_t GetSystemTick(void){
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
	return Tick;
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <GetSystemTick+0x14>)
 80004aa:	681b      	ldr	r3, [r3, #0]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	2000001c 	.word	0x2000001c

080004bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004bc:	480d      	ldr	r0, [pc, #52]	; (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c6:	490d      	ldr	r1, [pc, #52]	; (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004dc:	4c0a      	ldr	r4, [pc, #40]	; (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ea:	f000 f811 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f7ff feb5 	bl	800025c <main>

080004f2 <LoopForever>:

LoopForever:
  b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000500:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 8000504:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000508:	20000024 	.word	0x20000024

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>
	...

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	4d0d      	ldr	r5, [pc, #52]	; (8000548 <__libc_init_array+0x38>)
 8000514:	4c0d      	ldr	r4, [pc, #52]	; (800054c <__libc_init_array+0x3c>)
 8000516:	1b64      	subs	r4, r4, r5
 8000518:	10a4      	asrs	r4, r4, #2
 800051a:	2600      	movs	r6, #0
 800051c:	42a6      	cmp	r6, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	4d0b      	ldr	r5, [pc, #44]	; (8000550 <__libc_init_array+0x40>)
 8000522:	4c0c      	ldr	r4, [pc, #48]	; (8000554 <__libc_init_array+0x44>)
 8000524:	f000 f818 	bl	8000558 <_init>
 8000528:	1b64      	subs	r4, r4, r5
 800052a:	10a4      	asrs	r4, r4, #2
 800052c:	2600      	movs	r6, #0
 800052e:	42a6      	cmp	r6, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f855 3b04 	ldr.w	r3, [r5], #4
 8000538:	4798      	blx	r3
 800053a:	3601      	adds	r6, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000542:	4798      	blx	r3
 8000544:	3601      	adds	r6, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000570 	.word	0x08000570
 800054c:	08000570 	.word	0x08000570
 8000550:	08000570 	.word	0x08000570
 8000554:	08000574 	.word	0x08000574

08000558 <_init>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr

08000564 <_fini>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr
