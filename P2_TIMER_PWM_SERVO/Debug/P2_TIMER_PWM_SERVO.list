
P2_TIMER_PWM_SERVO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000510  08000510  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000510  08000510  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000510  08000510  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000510  08000510  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000510  08000510  00010510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000518  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c02  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000250  00000000  00000000  00020c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000090  00000000  00000000  00020ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000063  00000000  00000000  00020f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c479  00000000  00000000  00020fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000075a  00000000  00000000  0003d43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009eec6  00000000  00000000  0003db96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000190  00000000  00000000  000dca5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000dcbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000004 	.word	0x20000004
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080004f8 	.word	0x080004f8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000008 	.word	0x20000008
 80001c0:	080004f8 	.word	0x080004f8

080001c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	db0b      	blt.n	80001ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	f003 021f 	and.w	r2, r3, #31
 80001dc:	4907      	ldr	r1, [pc, #28]	; (80001fc <__NVIC_EnableIRQ+0x38>)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	095b      	lsrs	r3, r3, #5
 80001e4:	2001      	movs	r0, #1
 80001e6:	fa00 f202 	lsl.w	r2, r0, r2
 80001ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100

08000200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	6039      	str	r1, [r7, #0]
 800020a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000210:	2b00      	cmp	r3, #0
 8000212:	db0a      	blt.n	800022a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	b2da      	uxtb	r2, r3
 8000218:	490c      	ldr	r1, [pc, #48]	; (800024c <__NVIC_SetPriority+0x4c>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000228:	e00a      	b.n	8000240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	b2da      	uxtb	r2, r3
 800022e:	4908      	ldr	r1, [pc, #32]	; (8000250 <__NVIC_SetPriority+0x50>)
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	f003 030f 	and.w	r3, r3, #15
 8000236:	3b04      	subs	r3, #4
 8000238:	0112      	lsls	r2, r2, #4
 800023a:	b2d2      	uxtb	r2, r2
 800023c:	440b      	add	r3, r1
 800023e:	761a      	strb	r2, [r3, #24]
}
 8000240:	bf00      	nop
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr
 800024c:	e000e100 	.word	0xe000e100
 8000250:	e000ed00 	.word	0xe000ed00

08000254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3b01      	subs	r3, #1
 8000260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000264:	d301      	bcc.n	800026a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000266:	2301      	movs	r3, #1
 8000268:	e00f      	b.n	800028a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800026a:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <SysTick_Config+0x40>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3b01      	subs	r3, #1
 8000270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000272:	210f      	movs	r1, #15
 8000274:	f04f 30ff 	mov.w	r0, #4294967295
 8000278:	f7ff ffc2 	bl	8000200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <SysTick_Config+0x40>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <SysTick_Config+0x40>)
 8000284:	2207      	movs	r2, #7
 8000286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000288:	2300      	movs	r3, #0
}
 800028a:	4618      	mov	r0, r3
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	e000e010 	.word	0xe000e010

08000298 <main>:
void TIM3Config(void);
void Delay(uint32_t delay_ms);
uint32_t GetSystemTick(void);

int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	SysTick_Config(4000000/1000);
 800029c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80002a0:	f7ff ffd8 	bl	8000254 <SysTick_Config>

	ServoPin();
 80002a4:	f000 f832 	bl	800030c <ServoPin>
	TIM3Config();
 80002a8:	f000 f850 	bl	800034c <TIM3Config>

	/* Loop forever */
	while(1){
		for (pos = 30; pos <= 115; pos += 1) { // from 0 degrees to 180 degrees
 80002ac:	4b15      	ldr	r3, [pc, #84]	; (8000304 <main+0x6c>)
 80002ae:	221e      	movs	r2, #30
 80002b0:	701a      	strb	r2, [r3, #0]
 80002b2:	e00c      	b.n	80002ce <main+0x36>
			TIM3->CCR1=pos;              // set the servo to the "pos" position
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <main+0x6c>)
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <main+0x70>)
 80002ba:	635a      	str	r2, [r3, #52]	; 0x34
		    Delay(25);
 80002bc:	2019      	movs	r0, #25
 80002be:	f000 f8b5 	bl	800042c <Delay>
		for (pos = 30; pos <= 115; pos += 1) { // from 0 degrees to 180 degrees
 80002c2:	4b10      	ldr	r3, [pc, #64]	; (8000304 <main+0x6c>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <main+0x6c>)
 80002cc:	701a      	strb	r2, [r3, #0]
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <main+0x6c>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	2b73      	cmp	r3, #115	; 0x73
 80002d4:	d9ee      	bls.n	80002b4 <main+0x1c>
		  }
		  for (pos = 115; pos >= 30; pos -= 1) { //from 180 degrees to 0 degrees
 80002d6:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <main+0x6c>)
 80002d8:	2273      	movs	r2, #115	; 0x73
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	e00c      	b.n	80002f8 <main+0x60>
			  TIM3->CCR1=pos;              // set the servo to the "pos" position
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <main+0x6c>)
 80002e0:	781a      	ldrb	r2, [r3, #0]
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <main+0x70>)
 80002e4:	635a      	str	r2, [r3, #52]	; 0x34
		    Delay(25);
 80002e6:	2019      	movs	r0, #25
 80002e8:	f000 f8a0 	bl	800042c <Delay>
		  for (pos = 115; pos >= 30; pos -= 1) { //from 180 degrees to 0 degrees
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <main+0x6c>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <main+0x6c>)
 80002f6:	701a      	strb	r2, [r3, #0]
 80002f8:	4b02      	ldr	r3, [pc, #8]	; (8000304 <main+0x6c>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b1d      	cmp	r3, #29
 80002fe:	d8ee      	bhi.n	80002de <main+0x46>
		for (pos = 30; pos <= 115; pos += 1) { // from 0 degrees to 180 degrees
 8000300:	e7d4      	b.n	80002ac <main+0x14>
 8000302:	bf00      	nop
 8000304:	20000000 	.word	0x20000000
 8000308:	40000400 	.word	0x40000400

0800030c <ServoPin>:
		  }
	}
}
void ServoPin (){
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;//enable gpioa
 8000310:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <ServoPin+0x3c>)
 8000312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000314:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <ServoPin+0x3c>)
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOA->MODER &= ~(GPIO_MODER_MODE6_0);// 10: Alternate function mode   (11 reset state)
 800031c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA-> AFR[0] |= GPIO_AFRL_AFSEL6_1; // 0010: AF2  alternate function low register (AFR- table 0-low register, 1- high register)
 800032c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000330:	6a1b      	ldr	r3, [r3, #32]
 8000332:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800033a:	6213      	str	r3, [r2, #32]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000

0800034c <TIM3Config>:


void TIM3Config(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//Timer config
	RCC-> APB1ENR1 |= RCC_APB1ENR1_TIM3EN; //power clock
 8000350:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <TIM3Config+0x78>)
 8000352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000354:	4a1b      	ldr	r2, [pc, #108]	; (80003c4 <TIM3Config+0x78>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	6593      	str	r3, [r2, #88]	; 0x58
	TIM3-> PSC= (80-1); //prescaler 4MHz /80 =50000 Hz, 0,02ms 1tick
 800035c:	4b1a      	ldr	r3, [pc, #104]	; (80003c8 <TIM3Config+0x7c>)
 800035e:	224f      	movs	r2, #79	; 0x4f
 8000360:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3-> ARR= (1000-1);// auto-reload register  1000 * 0,02 ms = 20 ms per one timer cycle (50Hz)
 8000362:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <TIM3Config+0x7c>)
 8000364:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000368:	62da      	str	r2, [r3, #44]	; 0x2c

	//PWM config
	//TIM3 -> CCMR1 &= ~(TIM_CCMR1_CC1S);//default as output
	TIM3-> CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;//pwm channel 0110: PWM mode 1, upcounting - active when TIMx_CNT<TIMx_CCR1
 800036a:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <TIM3Config+0x7c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <TIM3Config+0x7c>)
 8000370:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000374:	6193      	str	r3, [r2, #24]
	TIM3->CCR1=74; //capture/compare register
 8000376:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <TIM3Config+0x7c>)
 8000378:	224a      	movs	r2, #74	; 0x4a
 800037a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCER|= TIM_CCER_CC1E;//  Capture/Compare 1 output enable.
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <TIM3Config+0x7c>)
 800037e:	6a1b      	ldr	r3, [r3, #32]
 8000380:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <TIM3Config+0x7c>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6213      	str	r3, [r2, #32]
	//Enable interrupts
	TIM3->DIER|= TIM_DIER_UIE;//Update interrupt enable
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <TIM3Config+0x7c>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <TIM3Config+0x7c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	60d3      	str	r3, [r2, #12]
	TIM3->DIER|=TIM_DIER_CC1IE;//Capture/Compare 1 interrupt enable
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <TIM3Config+0x7c>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <TIM3Config+0x7c>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(TIM3_IRQn,0);
 80003a0:	2100      	movs	r1, #0
 80003a2:	201d      	movs	r0, #29
 80003a4:	f7ff ff2c 	bl	8000200 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM3_IRQn);
 80003a8:	201d      	movs	r0, #29
 80003aa:	f7ff ff0b 	bl	80001c4 <__NVIC_EnableIRQ>

	TIM3->CNT=0; // clear counter
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <TIM3Config+0x7c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3-> CR1|=TIM_CR1_CEN;//enable counter(start)
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <TIM3Config+0x7c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a03      	ldr	r2, [pc, #12]	; (80003c8 <TIM3Config+0x7c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40000400 	.word	0x40000400

080003cc <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF){
 80003d0:	4b0e      	ldr	r3, [pc, #56]	; (800040c <TIM3_IRQHandler+0x40>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d005      	beq.n	80003e8 <TIM3_IRQHandler+0x1c>
		TIM3-> SR &= ~(TIM_SR_UIF); //cleared by 0
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <TIM3_IRQHandler+0x40>)
 80003de:	691b      	ldr	r3, [r3, #16]
 80003e0:	4a0a      	ldr	r2, [pc, #40]	; (800040c <TIM3_IRQHandler+0x40>)
 80003e2:	f023 0301 	bic.w	r3, r3, #1
 80003e6:	6113      	str	r3, [r2, #16]
		//Update event-reload timer
	}

	if(TIM3->SR & TIM_SR_CC1IF){
 80003e8:	4b08      	ldr	r3, [pc, #32]	; (800040c <TIM3_IRQHandler+0x40>)
 80003ea:	691b      	ldr	r3, [r3, #16]
 80003ec:	f003 0302 	and.w	r3, r3, #2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d005      	beq.n	8000400 <TIM3_IRQHandler+0x34>
			TIM3-> SR &= ~(TIM_SR_CC1IF); //cleared by 0
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <TIM3_IRQHandler+0x40>)
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <TIM3_IRQHandler+0x40>)
 80003fa:	f023 0302 	bic.w	r3, r3, #2
 80003fe:	6113      	str	r3, [r2, #16]
			//PWM capture/compare
		}


}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40000400 	.word	0x40000400

08000410 <SysTick_Handler>:

void SysTick_Handler(void){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	Tick++;
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SysTick_Handler+0x18>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	4a03      	ldr	r2, [pc, #12]	; (8000428 <SysTick_Handler+0x18>)
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	20000020 	.word	0x20000020

0800042c <Delay>:

void Delay(uint32_t delay_ms){
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	uint32_t StartTime=Tick;
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <Delay+0x2c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	60fb      	str	r3, [r7, #12]
	while(Tick<(StartTime+delay_ms)){
 800043a:	bf00      	nop
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	441a      	add	r2, r3
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <Delay+0x2c>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	429a      	cmp	r2, r3
 8000448:	d8f8      	bhi.n	800043c <Delay+0x10>

	}
}
 800044a:	bf00      	nop
 800044c:	bf00      	nop
 800044e:	3714      	adds	r7, #20
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	20000020 	.word	0x20000020

0800045c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800045c:	480d      	ldr	r0, [pc, #52]	; (8000494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000460:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <LoopForever+0x6>)
  ldr r1, =_edata
 8000466:	490d      	ldr	r1, [pc, #52]	; (800049c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000468:	4a0d      	ldr	r2, [pc, #52]	; (80004a0 <LoopForever+0xe>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800046c:	e002      	b.n	8000474 <LoopCopyDataInit>

0800046e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000472:	3304      	adds	r3, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000478:	d3f9      	bcc.n	800046e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800047a:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800047c:	4c0a      	ldr	r4, [pc, #40]	; (80004a8 <LoopForever+0x16>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000480:	e001      	b.n	8000486 <LoopFillZerobss>

08000482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000484:	3204      	adds	r2, #4

08000486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000488:	d3fb      	bcc.n	8000482 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800048a:	f000 f811 	bl	80004b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048e:	f7ff ff03 	bl	8000298 <main>

08000492 <LoopForever>:

LoopForever:
  b LoopForever
 8000492:	e7fe      	b.n	8000492 <LoopForever>
  ldr   r0, =_estack
 8000494:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800049c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004a0:	08000518 	.word	0x08000518
  ldr r2, =_sbss
 80004a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004a8:	20000024 	.word	0x20000024

080004ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ac:	e7fe      	b.n	80004ac <ADC1_2_IRQHandler>
	...

080004b0 <__libc_init_array>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	4d0d      	ldr	r5, [pc, #52]	; (80004e8 <__libc_init_array+0x38>)
 80004b4:	4c0d      	ldr	r4, [pc, #52]	; (80004ec <__libc_init_array+0x3c>)
 80004b6:	1b64      	subs	r4, r4, r5
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	2600      	movs	r6, #0
 80004bc:	42a6      	cmp	r6, r4
 80004be:	d109      	bne.n	80004d4 <__libc_init_array+0x24>
 80004c0:	4d0b      	ldr	r5, [pc, #44]	; (80004f0 <__libc_init_array+0x40>)
 80004c2:	4c0c      	ldr	r4, [pc, #48]	; (80004f4 <__libc_init_array+0x44>)
 80004c4:	f000 f818 	bl	80004f8 <_init>
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	10a4      	asrs	r4, r4, #2
 80004cc:	2600      	movs	r6, #0
 80004ce:	42a6      	cmp	r6, r4
 80004d0:	d105      	bne.n	80004de <__libc_init_array+0x2e>
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d8:	4798      	blx	r3
 80004da:	3601      	adds	r6, #1
 80004dc:	e7ee      	b.n	80004bc <__libc_init_array+0xc>
 80004de:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e2:	4798      	blx	r3
 80004e4:	3601      	adds	r6, #1
 80004e6:	e7f2      	b.n	80004ce <__libc_init_array+0x1e>
 80004e8:	08000510 	.word	0x08000510
 80004ec:	08000510 	.word	0x08000510
 80004f0:	08000510 	.word	0x08000510
 80004f4:	08000514 	.word	0x08000514

080004f8 <_init>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr

08000504 <_fini>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr
