
P5_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000504  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000688  08000688  00010688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006a8  080006a8  000106b0  2**0
                  CONTENTS
  4 .ARM          00000000  080006a8  080006a8  000106b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a8  080006b0  000106b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000106b0  2**0
                  CONTENTS
 10 .bss          00000050  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000106e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000fbd  00000000  00000000  00010723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000355  00000000  00000000  000116e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b8  00000000  00000000  00011a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007e  00000000  00000000  00011af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001d069  00000000  00000000  00011b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000fa5  00000000  00000000  0002ebd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a2327  00000000  00000000  0002fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000214  00000000  00000000  000d1ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000d20b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000670 	.word	0x08000670

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	08000670 	.word	0x08000670

080001c4 <strcmp>:
 80001c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001cc:	2a01      	cmp	r2, #1
 80001ce:	bf28      	it	cs
 80001d0:	429a      	cmpcs	r2, r3
 80001d2:	d0f7      	beq.n	80001c4 <strcmp>
 80001d4:	1ad0      	subs	r0, r2, r3
 80001d6:	4770      	bx	lr

080001d8 <ConfigOutput>:
 */


#include "gpio_conf.h"

void ConfigOutput(){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;//Active port
 80001dc:	4b19      	ldr	r3, [pc, #100]	; (8000244 <ConfigOutput+0x6c>)
 80001de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e0:	4a18      	ldr	r2, [pc, #96]	; (8000244 <ConfigOutput+0x6c>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= GPIO_MODER_MODE5_0;//set output
 80001e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_1);
 80001f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000206:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5);// push pull
 8000208:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000212:	f023 0320 	bic.w	r3, r3, #32
 8000216:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);// speed react
 8000218:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000222:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000226:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5);//no pull up, pull down
 8000228:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000232:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000236:	60d3      	str	r3, [r2, #12]

}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40021000 	.word	0x40021000

08000248 <ConfigOutput2>:
void ConfigOutput2(){
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;//Active port
 800024c:	4b19      	ldr	r3, [pc, #100]	; (80002b4 <ConfigOutput2+0x6c>)
 800024e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000250:	4a18      	ldr	r2, [pc, #96]	; (80002b4 <ConfigOutput2+0x6c>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= GPIO_MODER_MODE7_0;//set output
 8000258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000266:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE7_1);
 8000268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000272:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000276:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT7);// push pull
 8000278:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000286:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7);// speed react
 8000288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000292:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000296:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD7);//no pull up, pull down
 8000298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002a6:	60d3      	str	r3, [r2, #12]

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40021000 	.word	0x40021000

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3b01      	subs	r3, #1
 8000318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800031c:	d301      	bcc.n	8000322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031e:	2301      	movs	r3, #1
 8000320:	e00f      	b.n	8000342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <SysTick_Config+0x40>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	3b01      	subs	r3, #1
 8000328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800032a:	210f      	movs	r1, #15
 800032c:	f04f 30ff 	mov.w	r0, #4294967295
 8000330:	f7ff ffc2 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <SysTick_Config+0x40>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <SysTick_Config+0x40>)
 800033c:	2207      	movs	r2, #7
 800033e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000340:	2300      	movs	r3, #0
}
 8000342:	4618      	mov	r0, r3
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	e000e010 	.word	0xe000e010

08000350 <main>:
uint8_t rxpos=0;
char tab1[20];
uint8_t CompareReady=0;

int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	SysTick_Config(4000000/1000);
 8000356:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800035a:	f7ff ffd7 	bl	800030c <SysTick_Config>
	UART2_Config();
 800035e:	f000 f84b 	bl	80003f8 <UART2_Config>
	ConfigOutput();
 8000362:	f7ff ff39 	bl	80001d8 <ConfigOutput>
	ConfigOutput2();
 8000366:	f7ff ff6f 	bl	8000248 <ConfigOutput2>
	UART2_SendStr("Hello World\n\r");
 800036a:	481e      	ldr	r0, [pc, #120]	; (80003e4 <main+0x94>)
 800036c:	f000 f89e 	bl	80004ac <UART2_SendStr>
	char ReceiveChar;
	while(1){
		uint8_t ReceiveStatus = UART2_RecChar(&ReceiveChar);
 8000370:	1dbb      	adds	r3, r7, #6
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f8ca 	bl	800050c <UART2_RecChar>
 8000378:	4603      	mov	r3, r0
 800037a:	71fb      	strb	r3, [r7, #7]
		//compare to single char
		if(ReceiveStatus == 0){
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d10f      	bne.n	80003a2 <main+0x52>
					// char received
			if(ReceiveChar == '1'){
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	2b31      	cmp	r3, #49	; 0x31
 8000386:	d104      	bne.n	8000392 <main+0x42>
				GPIOA->BSRR = GPIO_BSRR_BS5;
 8000388:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800038c:	2220      	movs	r2, #32
 800038e:	619a      	str	r2, [r3, #24]
 8000390:	e007      	b.n	80003a2 <main+0x52>
				}
			else if(ReceiveChar == '0'){
 8000392:	79bb      	ldrb	r3, [r7, #6]
 8000394:	2b30      	cmp	r3, #48	; 0x30
 8000396:	d104      	bne.n	80003a2 <main+0x52>
				GPIOA->BSRR = GPIO_BSRR_BR5;
 8000398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003a0:	619a      	str	r2, [r3, #24]
		}
		else{
			// char NOT received}
		}
			//compare string
		if(CompareReady){
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <main+0x98>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0e2      	beq.n	8000370 <main+0x20>
		if(strcmp(tab1,"LDON")==0){
 80003aa:	4910      	ldr	r1, [pc, #64]	; (80003ec <main+0x9c>)
 80003ac:	4810      	ldr	r0, [pc, #64]	; (80003f0 <main+0xa0>)
 80003ae:	f7ff ff09 	bl	80001c4 <strcmp>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d104      	bne.n	80003c2 <main+0x72>
			GPIOA->BSRR = GPIO_BSRR_BS7;
 80003b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	619a      	str	r2, [r3, #24]
 80003c0:	e00b      	b.n	80003da <main+0x8a>
			}
		else if(strcmp(tab1,"LDOFF")==0){
 80003c2:	490c      	ldr	r1, [pc, #48]	; (80003f4 <main+0xa4>)
 80003c4:	480a      	ldr	r0, [pc, #40]	; (80003f0 <main+0xa0>)
 80003c6:	f7ff fefd 	bl	80001c4 <strcmp>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d104      	bne.n	80003da <main+0x8a>
			GPIOA->BSRR = GPIO_BSRR_BR7;
 80003d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003d4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80003d8:	619a      	str	r2, [r3, #24]
			}
		CompareReady=0;
 80003da:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <main+0x98>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	while(1){
 80003e0:	e7c6      	b.n	8000370 <main+0x20>
 80003e2:	bf00      	nop
 80003e4:	08000688 	.word	0x08000688
 80003e8:	2000004c 	.word	0x2000004c
 80003ec:	08000698 	.word	0x08000698
 80003f0:	20000038 	.word	0x20000038
 80003f4:	080006a0 	.word	0x080006a0

080003f8 <UART2_Config>:
		}

	}
}

void UART2_Config(){
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	RCC-> AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80003fc:	4b29      	ldr	r3, [pc, #164]	; (80004a4 <UART2_Config+0xac>)
 80003fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000400:	4a28      	ldr	r2, [pc, #160]	; (80004a4 <UART2_Config+0xac>)
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	64d3      	str	r3, [r2, #76]	; 0x4c
	//PA2 TX
	GPIOA-> MODER &= ~(GPIO_MODER_MODE2_0);
 8000408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000412:	f023 0310 	bic.w	r3, r3, #16
 8000416:	6013      	str	r3, [r2, #0]
	GPIOA-> AFR[0] |= GPIO_AFRL_AFSEL2_0 | GPIO_AFRL_AFSEL2_1 | GPIO_AFRL_AFSEL2_2; //alternate function
 8000418:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800041c:	6a1b      	ldr	r3, [r3, #32]
 800041e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000426:	6213      	str	r3, [r2, #32]

	//PA3 RX
	GPIOA-> MODER &= ~(GPIO_MODER_MODE3_0);
 8000428:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000436:	6013      	str	r3, [r2, #0]
	GPIOA-> AFR[0] |= GPIO_AFRL_AFSEL3_0 | GPIO_AFRL_AFSEL3_1 | GPIO_AFRL_AFSEL3_2; //alternate function
 8000438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800043c:	6a1b      	ldr	r3, [r3, #32]
 800043e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000442:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000446:	6213      	str	r3, [r2, #32]
	GPIOA-> OTYPER |= GPIO_OTYPER_OT3;
 8000448:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6053      	str	r3, [r2, #4]


	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN; //Active UART
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <UART2_Config+0xac>)
 800045a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <UART2_Config+0xac>)
 800045e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000462:	6593      	str	r3, [r2, #88]	; 0x58
	USART2->CR2&=~(USART_CR2_STOP);//1 stop bit
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <UART2_Config+0xb0>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <UART2_Config+0xb0>)
 800046a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800046e:	6053      	str	r3, [r2, #4]
	USART2->CR1&=~(USART_CR1_M);//1 Start bit, 8 data bits
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <UART2_Config+0xb0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0c      	ldr	r2, [pc, #48]	; (80004a8 <UART2_Config+0xb0>)
 8000476:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800047a:	6013      	str	r3, [r2, #0]
	USART2->CR1&=~(USART_CR1_PCE);// No parity bit
 800047c:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <UART2_Config+0xb0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <UART2_Config+0xb0>)
 8000482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000486:	6013      	str	r3, [r2, #0]
	USART2-> BRR= (4000000/115200);//baud div (clock/baudrade)
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <UART2_Config+0xb0>)
 800048a:	2222      	movs	r2, #34	; 0x22
 800048c:	60da      	str	r2, [r3, #12]

//	USART2-> CR1 = USART_CR1_UE;//usart enable
//	USART2-> CR1 = USART_CR1_TE;// transmiter enable
//	USART2-> CR1 = USART_CR1_RE; // reciver enable
	USART2-> CR1 |= USART_CR1_UE|USART_CR1_TE|USART_CR1_RE;
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <UART2_Config+0xb0>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <UART2_Config+0xb0>)
 8000494:	f043 030d 	orr.w	r3, r3, #13
 8000498:	6013      	str	r3, [r2, #0]

}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40004400 	.word	0x40004400

080004ac <UART2_SendStr>:
void UART2_SendStr(char *str){
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	while(*str != '\0'){
 80004b4:	e007      	b.n	80004c6 <UART2_SendStr+0x1a>
		UART2_SendChar(*str);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f80c 	bl	80004d8 <UART2_SendChar>
		str++;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3301      	adds	r3, #1
 80004c4:	607b      	str	r3, [r7, #4]
	while(*str != '\0'){
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1f3      	bne.n	80004b6 <UART2_SendStr+0xa>
	}
}
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <UART2_SendChar>:
void UART2_SendChar(char c){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	USART2->TDR = c;
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <UART2_SendChar+0x30>)
 80004e4:	79fa      	ldrb	r2, [r7, #7]
 80004e6:	b292      	uxth	r2, r2
 80004e8:	851a      	strh	r2, [r3, #40]	; 0x28
	while(!(USART2->ISR & USART_ISR_TXE));
 80004ea:	bf00      	nop
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <UART2_SendChar+0x30>)
 80004ee:	69db      	ldr	r3, [r3, #28]
 80004f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f9      	beq.n	80004ec <UART2_SendChar+0x14>
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	40004400 	.word	0x40004400

0800050c <UART2_RecChar>:



uint8_t UART2_RecChar(char *ch){
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	if(USART2->ISR & USART_ISR_RXNE){	// Ctrl+@ send '\0' PuTTy
 8000514:	4b23      	ldr	r3, [pc, #140]	; (80005a4 <UART2_RecChar+0x98>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	f003 0320 	and.w	r3, r3, #32
 800051c:	2b00      	cmp	r3, #0
 800051e:	d03a      	beq.n	8000596 <UART2_RecChar+0x8a>
		*ch=USART2->RDR;
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <UART2_RecChar+0x98>)
 8000522:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000524:	b29b      	uxth	r3, r3
 8000526:	b2da      	uxtb	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	701a      	strb	r2, [r3, #0]
		rxbuffer[rxpos++]=USART2->RDR;
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <UART2_RecChar+0x98>)
 800052e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000530:	b299      	uxth	r1, r3
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <UART2_RecChar+0x9c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	b2d0      	uxtb	r0, r2
 800053a:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <UART2_RecChar+0x9c>)
 800053c:	7010      	strb	r0, [r2, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	b2c9      	uxtb	r1, r1
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <UART2_RecChar+0xa0>)
 8000544:	5499      	strb	r1, [r3, r2]
		if(USART2->RDR=='\0' || rxpos>19){
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <UART2_RecChar+0x98>)
 8000548:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800054a:	b29b      	uxth	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d003      	beq.n	8000558 <UART2_RecChar+0x4c>
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <UART2_RecChar+0x9c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b13      	cmp	r3, #19
 8000556:	d91c      	bls.n	8000592 <UART2_RecChar+0x86>
			for(int i=0;i<20;i++){
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	e010      	b.n	8000580 <UART2_RecChar+0x74>
				tab1[i]=rxbuffer[i];//copy buffer
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <UART2_RecChar+0xa0>)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	7819      	ldrb	r1, [r3, #0]
 8000566:	4a12      	ldr	r2, [pc, #72]	; (80005b0 <UART2_RecChar+0xa4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4413      	add	r3, r2
 800056c:	460a      	mov	r2, r1
 800056e:	701a      	strb	r2, [r3, #0]
				rxbuffer[i]='\0';//clear buffer
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <UART2_RecChar+0xa0>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4413      	add	r3, r2
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<20;i++){
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3301      	adds	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b13      	cmp	r3, #19
 8000584:	ddeb      	ble.n	800055e <UART2_RecChar+0x52>
				}
			rxpos=0;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <UART2_RecChar+0x9c>)
 8000588:	2200      	movs	r2, #0
 800058a:	701a      	strb	r2, [r3, #0]
			CompareReady=1;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <UART2_RecChar+0xa8>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
		}
		return 0;
 8000592:	2300      	movs	r3, #0
 8000594:	e000      	b.n	8000598 <UART2_RecChar+0x8c>
	}
	return 1;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40004400 	.word	0x40004400
 80005a8:	20000034 	.word	0x20000034
 80005ac:	20000020 	.word	0x20000020
 80005b0:	20000038 	.word	0x20000038
 80005b4:	2000004c 	.word	0x2000004c

080005b8 <SysTick_Handler>:

uint32_t GetSystemTick(void){
	return Tick;
}
void SysTick_Handler(void){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	Tick++;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <SysTick_Handler+0x18>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <SysTick_Handler+0x18>)
 80005c4:	6013      	str	r3, [r2, #0]
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	2000001c 	.word	0x2000001c

080005d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <LoopForever+0x6>)
  ldr r1, =_edata
 80005de:	490d      	ldr	r1, [pc, #52]	; (8000614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <LoopForever+0xe>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f4:	4c0a      	ldr	r4, [pc, #40]	; (8000620 <LoopForever+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000602:	f000 f811 	bl	8000628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff fea3 	bl	8000350 <main>

0800060a <LoopForever>:

LoopForever:
  b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   r0, =_estack
 800060c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000618:	080006b0 	.word	0x080006b0
  ldr r2, =_sbss
 800061c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000620:	20000050 	.word	0x20000050

08000624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_2_IRQHandler>
	...

08000628 <__libc_init_array>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4d0d      	ldr	r5, [pc, #52]	; (8000660 <__libc_init_array+0x38>)
 800062c:	4c0d      	ldr	r4, [pc, #52]	; (8000664 <__libc_init_array+0x3c>)
 800062e:	1b64      	subs	r4, r4, r5
 8000630:	10a4      	asrs	r4, r4, #2
 8000632:	2600      	movs	r6, #0
 8000634:	42a6      	cmp	r6, r4
 8000636:	d109      	bne.n	800064c <__libc_init_array+0x24>
 8000638:	4d0b      	ldr	r5, [pc, #44]	; (8000668 <__libc_init_array+0x40>)
 800063a:	4c0c      	ldr	r4, [pc, #48]	; (800066c <__libc_init_array+0x44>)
 800063c:	f000 f818 	bl	8000670 <_init>
 8000640:	1b64      	subs	r4, r4, r5
 8000642:	10a4      	asrs	r4, r4, #2
 8000644:	2600      	movs	r6, #0
 8000646:	42a6      	cmp	r6, r4
 8000648:	d105      	bne.n	8000656 <__libc_init_array+0x2e>
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000650:	4798      	blx	r3
 8000652:	3601      	adds	r6, #1
 8000654:	e7ee      	b.n	8000634 <__libc_init_array+0xc>
 8000656:	f855 3b04 	ldr.w	r3, [r5], #4
 800065a:	4798      	blx	r3
 800065c:	3601      	adds	r6, #1
 800065e:	e7f2      	b.n	8000646 <__libc_init_array+0x1e>
 8000660:	080006a8 	.word	0x080006a8
 8000664:	080006a8 	.word	0x080006a8
 8000668:	080006a8 	.word	0x080006a8
 800066c:	080006ac 	.word	0x080006ac

08000670 <_init>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr

0800067c <_fini>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr
