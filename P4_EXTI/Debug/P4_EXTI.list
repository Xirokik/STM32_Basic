
P4_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000488  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800060c  08000614  00010614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800060c  0800060c  00010614  2**0
                  CONTENTS
  4 .ARM          00000000  0800060c  0800060c  00010614  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800060c  08000614  00010614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000610  08000610  00010610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010614  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010614  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010644  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000f3d  00000000  00000000  00010687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002f3  00000000  00000000  000115c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c0  00000000  00000000  000118b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000081  00000000  00000000  00011978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c569  00000000  00000000  000119f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000c7f  00000000  00000000  0002df62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009ef2f  00000000  00000000  0002ebe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000200  00000000  00000000  000cdb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000cdd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080005f4 	.word	0x080005f4

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080005f4 	.word	0x080005f4

080001c4 <ConfigLD>:



#include "gpio_conf.h"

void ConfigLD(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;//Active port
 80001c8:	4b19      	ldr	r3, [pc, #100]	; (8000230 <ConfigLD+0x6c>)
 80001ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001cc:	4a18      	ldr	r2, [pc, #96]	; (8000230 <ConfigLD+0x6c>)
 80001ce:	f043 0301 	orr.w	r3, r3, #1
 80001d2:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= GPIO_MODER_MODE5_0;//set output
 80001d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_1);
 80001e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT5);// push pull
 80001f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001fe:	f023 0320 	bic.w	r3, r3, #32
 8000202:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);// speed react
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	689b      	ldr	r3, [r3, #8]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000212:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD5);//no pull up, pull down
 8000214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000218:	68db      	ldr	r3, [r3, #12]
 800021a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800021e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000222:	60d3      	str	r3, [r2, #12]

}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000

08000234 <ConfigLD2>:

void ConfigLD2(){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;//Active port
 8000238:	4b19      	ldr	r3, [pc, #100]	; (80002a0 <ConfigLD2+0x6c>)
 800023a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023c:	4a18      	ldr	r2, [pc, #96]	; (80002a0 <ConfigLD2+0x6c>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= GPIO_MODER_MODE7_0;//set output
 8000244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000252:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE7_1);
 8000254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT7);// push pull
 8000264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000272:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7);// speed react
 8000274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000282:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD7);//no pull up, pull down
 8000284:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000292:	60d3      	str	r3, [r2, #12]

}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000

080002a4 <ConfigButton>:

void ConfigButton(){
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <ConfigButton+0x4c>)
 80002aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ac:	4a10      	ldr	r2, [pc, #64]	; (80002f0 <ConfigButton+0x4c>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER &= ~(GPIO_MODER_MODE6);//set input
 80002b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD6_1);// pull up
 80002c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80002d2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD6_0;
 80002d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d8:	68db      	ldr	r3, [r3, #12]
 80002da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	40021000 	.word	0x40021000

080002f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	2b00      	cmp	r3, #0
 8000304:	db0b      	blt.n	800031e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f003 021f 	and.w	r2, r3, #31
 800030c:	4907      	ldr	r1, [pc, #28]	; (800032c <__NVIC_EnableIRQ+0x38>)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	095b      	lsrs	r3, r3, #5
 8000314:	2001      	movs	r0, #1
 8000316:	fa00 f202 	lsl.w	r2, r0, r2
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800031e:	bf00      	nop
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	e000e100 	.word	0xe000e100

08000330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000340:	2b00      	cmp	r3, #0
 8000342:	db0a      	blt.n	800035a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	b2da      	uxtb	r2, r3
 8000348:	490c      	ldr	r1, [pc, #48]	; (800037c <__NVIC_SetPriority+0x4c>)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	0112      	lsls	r2, r2, #4
 8000350:	b2d2      	uxtb	r2, r2
 8000352:	440b      	add	r3, r1
 8000354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000358:	e00a      	b.n	8000370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	b2da      	uxtb	r2, r3
 800035e:	4908      	ldr	r1, [pc, #32]	; (8000380 <__NVIC_SetPriority+0x50>)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 030f 	and.w	r3, r3, #15
 8000366:	3b04      	subs	r3, #4
 8000368:	0112      	lsls	r2, r2, #4
 800036a:	b2d2      	uxtb	r2, r2
 800036c:	440b      	add	r3, r1
 800036e:	761a      	strb	r2, [r3, #24]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	e000e100 	.word	0xe000e100
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3b01      	subs	r3, #1
 8000390:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000394:	d301      	bcc.n	800039a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000396:	2301      	movs	r3, #1
 8000398:	e00f      	b.n	80003ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <SysTick_Config+0x40>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3b01      	subs	r3, #1
 80003a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a2:	210f      	movs	r1, #15
 80003a4:	f04f 30ff 	mov.w	r0, #4294967295
 80003a8:	f7ff ffc2 	bl	8000330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <SysTick_Config+0x40>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b2:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <SysTick_Config+0x40>)
 80003b4:	2207      	movs	r2, #7
 80003b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	e000e010 	.word	0xe000e010

080003c8 <main>:

void Delay(uint32_t delay_ms);
uint32_t GetSystemTick(void);

int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	ClockConfig();
 80003cc:	f000 f82a 	bl	8000424 <ClockConfig>
	SysTick_Config(16000000/1000);
 80003d0:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80003d4:	f7ff ffd6 	bl	8000384 <SysTick_Config>
	ConfigLD();
 80003d8:	f7ff fef4 	bl	80001c4 <ConfigLD>
	ConfigLD2();
 80003dc:	f7ff ff2a 	bl	8000234 <ConfigLD2>
	ConfigButton();
 80003e0:	f7ff ff60 	bl	80002a4 <ConfigButton>
	EXTI_Conf();
 80003e4:	f000 f858 	bl	8000498 <EXTI_Conf>
	TimerLD2=GetSystemTick();
 80003e8:	f000 f8aa 	bl	8000540 <GetSystemTick>
 80003ec:	4603      	mov	r3, r0
 80003ee:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <main+0x58>)
 80003f0:	6013      	str	r3, [r2, #0]
	/* Loop forever */
	while(1){

		if(GetSystemTick()-TimerLD2>500){
 80003f2:	f000 f8a5 	bl	8000540 <GetSystemTick>
 80003f6:	4602      	mov	r2, r0
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <main+0x58>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000402:	d9f6      	bls.n	80003f2 <main+0x2a>
			TimerLD2=GetSystemTick(); //Blink without delay
 8000404:	f000 f89c 	bl	8000540 <GetSystemTick>
 8000408:	4603      	mov	r3, r0
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <main+0x58>)
 800040c:	6013      	str	r3, [r2, #0]
			GPIOA->ODR^=GPIO_ODR_OD7; //LD TOGGLE (XOR)
 800040e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000418:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800041c:	6153      	str	r3, [r2, #20]
		if(GetSystemTick()-TimerLD2>500){
 800041e:	e7e8      	b.n	80003f2 <main+0x2a>
 8000420:	20000020 	.word	0x20000020

08000424 <ClockConfig>:
		}


	}
}
void ClockConfig(void){
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_MSION; // Active clock source
 8000428:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <ClockConfig+0x70>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a19      	ldr	r2, [pc, #100]	; (8000494 <ClockConfig+0x70>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR&RCC_CR_MSIRDY)); //wait for clock source ready
 8000434:	bf00      	nop
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <ClockConfig+0x70>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <ClockConfig+0x12>
	RCC->CR &= ~RCC_CR_MSIRANGE; //Clear range
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <ClockConfig+0x70>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a13      	ldr	r2, [pc, #76]	; (8000494 <ClockConfig+0x70>)
 8000448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800044c:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_MSIRANGE_8;// set range
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <ClockConfig+0x70>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a10      	ldr	r2, [pc, #64]	; (8000494 <ClockConfig+0x70>)
 8000454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000458:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_MSIRGSEL;// enable to read from range
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <ClockConfig+0x70>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <ClockConfig+0x70>)
 8000460:	f043 0308 	orr.w	r3, r3, #8
 8000464:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~RCC_CFGR_SW; // clear clock source
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <ClockConfig+0x70>)
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <ClockConfig+0x70>)
 800046c:	f023 0303 	bic.w	r3, r3, #3
 8000470:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_MSI;// set clock source
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <ClockConfig+0x70>)
 8000474:	4a07      	ldr	r2, [pc, #28]	; (8000494 <ClockConfig+0x70>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI);//wait until MSI is set as clock source
 800047a:	bf00      	nop
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <ClockConfig+0x70>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	f003 030c 	and.w	r3, r3, #12
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1f9      	bne.n	800047c <ClockConfig+0x58>


}
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <EXTI_Conf>:
void EXTI_Conf(void){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0

	RCC->APB2ENR|= RCC_APB2ENR_SYSCFGEN; //SYSCFG + COMP + VREFBUF clock enable
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <EXTI_Conf+0x44>)
 800049e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a0:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <EXTI_Conf+0x44>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	6613      	str	r3, [r2, #96]	; 0x60

	SYSCFG->EXTICR[1]|=SYSCFG_EXTICR2_EXTI6_PA; // SYSCFG external interrupt configuration register
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <EXTI_Conf+0x48>)
 80004aa:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <EXTI_Conf+0x48>)
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	60d3      	str	r3, [r2, #12]

	EXTI->IMR1|=EXTI_IMR1_IM6;//Interrupt request from Line 6 is not masked
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <EXTI_Conf+0x4c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <EXTI_Conf+0x4c>)
 80004b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ba:	6013      	str	r3, [r2, #0]

	EXTI->FTSR1|=EXTI_FTSR1_FT6; //Falling trigger enabled (for Event and Interrupt) for input line
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <EXTI_Conf+0x4c>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <EXTI_Conf+0x4c>)
 80004c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c6:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(EXTI9_5_IRQn,0);
 80004c8:	2100      	movs	r1, #0
 80004ca:	2017      	movs	r0, #23
 80004cc:	f7ff ff30 	bl	8000330 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004d0:	2017      	movs	r0, #23
 80004d2:	f7ff ff0f 	bl	80002f4 <__NVIC_EnableIRQ>


}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010000 	.word	0x40010000
 80004e4:	40010400 	.word	0x40010400

080004e8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void){
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	if(EXTI->PR1&EXTI_PR1_PIF6){
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <EXTI9_5_IRQHandler+0x38>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d00d      	beq.n	8000514 <EXTI9_5_IRQHandler+0x2c>
		EXTI->PR1|=EXTI_PR1_PIF6; //Selected trigger request occurred , cleared by writing a ‘1’
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <EXTI9_5_IRQHandler+0x38>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <EXTI9_5_IRQHandler+0x38>)
 80004fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000502:	6153      	str	r3, [r2, #20]
		GPIOA->ODR^=GPIO_ODR_OD5;
 8000504:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800050e:	f083 0320 	eor.w	r3, r3, #32
 8000512:	6153      	str	r3, [r2, #20]
	}
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40010400 	.word	0x40010400

08000524 <SysTick_Handler>:

void SysTick_Handler(void){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	Tick++;
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <SysTick_Handler+0x18>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4a03      	ldr	r2, [pc, #12]	; (800053c <SysTick_Handler+0x18>)
 8000530:	6013      	str	r3, [r2, #0]
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	2000001c 	.word	0x2000001c

08000540 <GetSystemTick>:

void Delay(uint32_t delay_ms){
	uint32_t StartTime=Tick;
	while(Tick<(StartTime+delay_ms));
}
uint32_t GetSystemTick(void){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	return Tick;
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <GetSystemTick+0x14>)
 8000546:	681b      	ldr	r3, [r3, #0]
}
 8000548:	4618      	mov	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	2000001c 	.word	0x2000001c

08000558 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000558:	480d      	ldr	r0, [pc, #52]	; (8000590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800055c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <LoopForever+0x6>)
  ldr r1, =_edata
 8000562:	490d      	ldr	r1, [pc, #52]	; (8000598 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <LoopForever+0xe>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000568:	e002      	b.n	8000570 <LoopCopyDataInit>

0800056a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800056a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800056c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056e:	3304      	adds	r3, #4

08000570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000574:	d3f9      	bcc.n	800056a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000578:	4c0a      	ldr	r4, [pc, #40]	; (80005a4 <LoopForever+0x16>)
  movs r3, #0
 800057a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800057c:	e001      	b.n	8000582 <LoopFillZerobss>

0800057e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000580:	3204      	adds	r2, #4

08000582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000584:	d3fb      	bcc.n	800057e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000586:	f000 f811 	bl	80005ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800058a:	f7ff ff1d 	bl	80003c8 <main>

0800058e <LoopForever>:

LoopForever:
  b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   r0, =_estack
 8000590:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000598:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800059c:	08000614 	.word	0x08000614
  ldr r2, =_sbss
 80005a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005a4:	20000024 	.word	0x20000024

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>
	...

080005ac <__libc_init_array>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	4d0d      	ldr	r5, [pc, #52]	; (80005e4 <__libc_init_array+0x38>)
 80005b0:	4c0d      	ldr	r4, [pc, #52]	; (80005e8 <__libc_init_array+0x3c>)
 80005b2:	1b64      	subs	r4, r4, r5
 80005b4:	10a4      	asrs	r4, r4, #2
 80005b6:	2600      	movs	r6, #0
 80005b8:	42a6      	cmp	r6, r4
 80005ba:	d109      	bne.n	80005d0 <__libc_init_array+0x24>
 80005bc:	4d0b      	ldr	r5, [pc, #44]	; (80005ec <__libc_init_array+0x40>)
 80005be:	4c0c      	ldr	r4, [pc, #48]	; (80005f0 <__libc_init_array+0x44>)
 80005c0:	f000 f818 	bl	80005f4 <_init>
 80005c4:	1b64      	subs	r4, r4, r5
 80005c6:	10a4      	asrs	r4, r4, #2
 80005c8:	2600      	movs	r6, #0
 80005ca:	42a6      	cmp	r6, r4
 80005cc:	d105      	bne.n	80005da <__libc_init_array+0x2e>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d4:	4798      	blx	r3
 80005d6:	3601      	adds	r6, #1
 80005d8:	e7ee      	b.n	80005b8 <__libc_init_array+0xc>
 80005da:	f855 3b04 	ldr.w	r3, [r5], #4
 80005de:	4798      	blx	r3
 80005e0:	3601      	adds	r6, #1
 80005e2:	e7f2      	b.n	80005ca <__libc_init_array+0x1e>
 80005e4:	0800060c 	.word	0x0800060c
 80005e8:	0800060c 	.word	0x0800060c
 80005ec:	0800060c 	.word	0x0800060c
 80005f0:	08000610 	.word	0x08000610

080005f4 <_init>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr

08000600 <_fini>:
 8000600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000602:	bf00      	nop
 8000604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000606:	bc08      	pop	{r3}
 8000608:	469e      	mov	lr, r3
 800060a:	4770      	bx	lr
